//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 10 files.
  struct file {
    /// Resource file `Inter-Black.ttf`.
    static let interBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Black", pathExtension: "ttf")
    /// Resource file `Inter-Bold.ttf`.
    static let interBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Bold", pathExtension: "ttf")
    /// Resource file `Inter-ExtraBold.ttf`.
    static let interExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-ExtraBold", pathExtension: "ttf")
    /// Resource file `Inter-ExtraLight.ttf`.
    static let interExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-ExtraLight", pathExtension: "ttf")
    /// Resource file `Inter-Light.ttf`.
    static let interLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Light", pathExtension: "ttf")
    /// Resource file `Inter-Medium.ttf`.
    static let interMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Medium", pathExtension: "ttf")
    /// Resource file `Inter-Regular.ttf`.
    static let interRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Regular", pathExtension: "ttf")
    /// Resource file `Inter-SemiBold.ttf`.
    static let interSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-SemiBold", pathExtension: "ttf")
    /// Resource file `Inter-Thin.ttf`.
    static let interThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Inter-Thin", pathExtension: "ttf")
    /// Resource file `splashImage.png`.
    static let splashImagePng = Rswift.FileResource(bundle: R.hostingBundle, name: "splashImage", pathExtension: "png")

    /// `bundle.url(forResource: "Inter-Black", withExtension: "ttf")`
    static func interBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Bold", withExtension: "ttf")`
    static func interBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-ExtraBold", withExtension: "ttf")`
    static func interExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-ExtraLight", withExtension: "ttf")`
    static func interExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Light", withExtension: "ttf")`
    static func interLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Medium", withExtension: "ttf")`
    static func interMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Regular", withExtension: "ttf")`
    static func interRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-SemiBold", withExtension: "ttf")`
    static func interSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Inter-Thin", withExtension: "ttf")`
    static func interThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.interThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "splashImage", withExtension: "png")`
    static func splashImagePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.splashImagePng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 9 fonts.
  struct font: Rswift.Validatable {
    /// Font `Inter-Black`.
    static let interBlack = Rswift.FontResource(fontName: "Inter-Black")
    /// Font `Inter-Bold`.
    static let interBold = Rswift.FontResource(fontName: "Inter-Bold")
    /// Font `Inter-ExtraBold`.
    static let interExtraBold = Rswift.FontResource(fontName: "Inter-ExtraBold")
    /// Font `Inter-ExtraLight`.
    static let interExtraLight = Rswift.FontResource(fontName: "Inter-ExtraLight")
    /// Font `Inter-Light`.
    static let interLight = Rswift.FontResource(fontName: "Inter-Light")
    /// Font `Inter-Medium`.
    static let interMedium = Rswift.FontResource(fontName: "Inter-Medium")
    /// Font `Inter-Regular`.
    static let interRegular = Rswift.FontResource(fontName: "Inter-Regular")
    /// Font `Inter-SemiBold`.
    static let interSemiBold = Rswift.FontResource(fontName: "Inter-SemiBold")
    /// Font `Inter-Thin`.
    static let interThin = Rswift.FontResource(fontName: "Inter-Thin")

    /// `UIFont(name: "Inter-Black", size: ...)`
    static func interBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interBlack, size: size)
    }

    /// `UIFont(name: "Inter-Bold", size: ...)`
    static func interBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interBold, size: size)
    }

    /// `UIFont(name: "Inter-ExtraBold", size: ...)`
    static func interExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interExtraBold, size: size)
    }

    /// `UIFont(name: "Inter-ExtraLight", size: ...)`
    static func interExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interExtraLight, size: size)
    }

    /// `UIFont(name: "Inter-Light", size: ...)`
    static func interLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interLight, size: size)
    }

    /// `UIFont(name: "Inter-Medium", size: ...)`
    static func interMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interMedium, size: size)
    }

    /// `UIFont(name: "Inter-Regular", size: ...)`
    static func interRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interRegular, size: size)
    }

    /// `UIFont(name: "Inter-SemiBold", size: ...)`
    static func interSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interSemiBold, size: size)
    }

    /// `UIFont(name: "Inter-Thin", size: ...)`
    static func interThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: interThin, size: size)
    }

    static func validate() throws {
      if R.font.interBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Black' could not be loaded, is 'Inter-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Bold' could not be loaded, is 'Inter-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-ExtraBold' could not be loaded, is 'Inter-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-ExtraLight' could not be loaded, is 'Inter-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Light' could not be loaded, is 'Inter-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Medium' could not be loaded, is 'Inter-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Regular' could not be loaded, is 'Inter-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-SemiBold' could not be loaded, is 'Inter-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.interThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Inter-Thin' could not be loaded, is 'Inter-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 61 images.
  struct image {
    /// Image `AAPL`.
    static let aapL = Rswift.ImageResource(bundle: R.hostingBundle, name: "AAPL")
    /// Image `AMD`.
    static let amD = Rswift.ImageResource(bundle: R.hostingBundle, name: "AMD")
    /// Image `AMZN`.
    static let amzN = Rswift.ImageResource(bundle: R.hostingBundle, name: "AMZN")
    /// Image `AUD`.
    static let auD = Rswift.ImageResource(bundle: R.hostingBundle, name: "AUD")
    /// Image `AvatarPlaceholder`.
    static let avatarPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "AvatarPlaceholder")
    /// Image `BNB`.
    static let bnB = Rswift.ImageResource(bundle: R.hostingBundle, name: "BNB")
    /// Image `BTC`.
    static let btC = Rswift.ImageResource(bundle: R.hostingBundle, name: "BTC")
    /// Image `CAD`.
    static let caD = Rswift.ImageResource(bundle: R.hostingBundle, name: "CAD")
    /// Image `CHF`.
    static let chF = Rswift.ImageResource(bundle: R.hostingBundle, name: "CHF")
    /// Image `DOGE`.
    static let dogE = Rswift.ImageResource(bundle: R.hostingBundle, name: "DOGE")
    /// Image `ETH`.
    static let etH = Rswift.ImageResource(bundle: R.hostingBundle, name: "ETH")
    /// Image `EUR`.
    static let euR = Rswift.ImageResource(bundle: R.hostingBundle, name: "EUR")
    /// Image `GBP`.
    static let gbP = Rswift.ImageResource(bundle: R.hostingBundle, name: "GBP")
    /// Image `JPY`.
    static let jpY = Rswift.ImageResource(bundle: R.hostingBundle, name: "JPY")
    /// Image `Logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo")
    /// Image `META`.
    static let metA = Rswift.ImageResource(bundle: R.hostingBundle, name: "META")
    /// Image `NVDA`.
    static let nvdA = Rswift.ImageResource(bundle: R.hostingBundle, name: "NVDA")
    /// Image `Onboarding2`.
    static let onboarding2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Onboarding2")
    /// Image `SOL`.
    static let soL = Rswift.ImageResource(bundle: R.hostingBundle, name: "SOL")
    /// Image `TSLA`.
    static let tslA = Rswift.ImageResource(bundle: R.hostingBundle, name: "TSLA")
    /// Image `USD`.
    static let usD = Rswift.ImageResource(bundle: R.hostingBundle, name: "USD")
    /// Image `XRP`.
    static let xrP = Rswift.ImageResource(bundle: R.hostingBundle, name: "XRP")
    /// Image `arrowDown`.
    static let arrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowDown")
    /// Image `arrowUp`.
    static let arrowUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrowUp")
    /// Image `articleHeaderPlaceholder`.
    static let articleHeaderPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "articleHeaderPlaceholder")
    /// Image `bd`.
    static let bd = Rswift.ImageResource(bundle: R.hostingBundle, name: "bd")
    /// Image `br`.
    static let br = Rswift.ImageResource(bundle: R.hostingBundle, name: "br")
    /// Image `chevron.down`.
    static let chevronDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "chevron.down")
    /// Image `cn`.
    static let cn = Rswift.ImageResource(bundle: R.hostingBundle, name: "cn")
    /// Image `downTrend`.
    static let downTrend = Rswift.ImageResource(bundle: R.hostingBundle, name: "downTrend")
    /// Image `editAvatar`.
    static let editAvatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "editAvatar")
    /// Image `gb`.
    static let gb = Rswift.ImageResource(bundle: R.hostingBundle, name: "gb")
    /// Image `greenArrowUp`.
    static let greenArrowUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "greenArrowUp")
    /// Image `historyTabIcon`.
    static let historyTabIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "historyTabIcon")
    /// Image `id`.
    static let id = Rswift.ImageResource(bundle: R.hostingBundle, name: "id")
    /// Image `in`.
    static let `in` = Rswift.ImageResource(bundle: R.hostingBundle, name: "in")
    /// Image `leaderboardTabICon`.
    static let leaderboardTabICon = Rswift.ImageResource(bundle: R.hostingBundle, name: "leaderboardTabICon")
    /// Image `mx`.
    static let mx = Rswift.ImageResource(bundle: R.hostingBundle, name: "mx")
    /// Image `ng`.
    static let ng = Rswift.ImageResource(bundle: R.hostingBundle, name: "ng")
    /// Image `onboarding3`.
    static let onboarding3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding3")
    /// Image `onboarding4`.
    static let onboarding4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding4")
    /// Image `onboarding6`.
    static let onboarding6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboarding6")
    /// Image `onboardingBackgroundForQuiz`.
    static let onboardingBackgroundForQuiz = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboardingBackgroundForQuiz")
    /// Image `onboardingBackground`.
    static let onboardingBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "onboardingBackground")
    /// Image `optionDeselected`.
    static let optionDeselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "optionDeselected")
    /// Image `optionSelected`.
    static let optionSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "optionSelected")
    /// Image `pk`.
    static let pk = Rswift.ImageResource(bundle: R.hostingBundle, name: "pk")
    /// Image `prefinalMainImage`.
    static let prefinalMainImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "prefinalMainImage")
    /// Image `redArrowDown`.
    static let redArrowDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "redArrowDown")
    /// Image `registrationBackground`.
    static let registrationBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "registrationBackground")
    /// Image `ru`.
    static let ru = Rswift.ImageResource(bundle: R.hostingBundle, name: "ru")
    /// Image `selectedCountryCell`.
    static let selectedCountryCell = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedCountryCell")
    /// Image `selectedPageIndicator`.
    static let selectedPageIndicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "selectedPageIndicator")
    /// Image `settingsBarIcon`.
    static let settingsBarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "settingsBarIcon")
    /// Image `settingsLetterIcon`.
    static let settingsLetterIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "settingsLetterIcon")
    /// Image `settingsStarIcon`.
    static let settingsStarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "settingsStarIcon")
    /// Image `splashImage`.
    static let splashImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "splashImage")
    /// Image `tradeBarIcon`.
    static let tradeBarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "tradeBarIcon")
    /// Image `unselectedCountryCell`.
    static let unselectedCountryCell = Rswift.ImageResource(bundle: R.hostingBundle, name: "unselectedCountryCell")
    /// Image `upTrend`.
    static let upTrend = Rswift.ImageResource(bundle: R.hostingBundle, name: "upTrend")
    /// Image `us`.
    static let us = Rswift.ImageResource(bundle: R.hostingBundle, name: "us")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AAPL", bundle: ..., traitCollection: ...)`
    static func aapL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aapL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AMD", bundle: ..., traitCollection: ...)`
    static func amD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AMZN", bundle: ..., traitCollection: ...)`
    static func amzN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amzN, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AUD", bundle: ..., traitCollection: ...)`
    static func auD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.auD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AvatarPlaceholder", bundle: ..., traitCollection: ...)`
    static func avatarPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatarPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BNB", bundle: ..., traitCollection: ...)`
    static func bnB(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bnB, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BTC", bundle: ..., traitCollection: ...)`
    static func btC(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btC, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CAD", bundle: ..., traitCollection: ...)`
    static func caD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.caD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CHF", bundle: ..., traitCollection: ...)`
    static func chF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chF, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DOGE", bundle: ..., traitCollection: ...)`
    static func dogE(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dogE, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ETH", bundle: ..., traitCollection: ...)`
    static func etH(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.etH, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EUR", bundle: ..., traitCollection: ...)`
    static func euR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.euR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "GBP", bundle: ..., traitCollection: ...)`
    static func gbP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gbP, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "JPY", bundle: ..., traitCollection: ...)`
    static func jpY(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jpY, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "META", bundle: ..., traitCollection: ...)`
    static func metA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.metA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "NVDA", bundle: ..., traitCollection: ...)`
    static func nvdA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nvdA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Onboarding2", bundle: ..., traitCollection: ...)`
    static func onboarding2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SOL", bundle: ..., traitCollection: ...)`
    static func soL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.soL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TSLA", bundle: ..., traitCollection: ...)`
    static func tslA(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tslA, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "USD", bundle: ..., traitCollection: ...)`
    static func usD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.usD, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "XRP", bundle: ..., traitCollection: ...)`
    static func xrP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.xrP, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrowDown", bundle: ..., traitCollection: ...)`
    static func arrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrowUp", bundle: ..., traitCollection: ...)`
    static func arrowUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrowUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "articleHeaderPlaceholder", bundle: ..., traitCollection: ...)`
    static func articleHeaderPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.articleHeaderPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bd", bundle: ..., traitCollection: ...)`
    static func bd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bd, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "br", bundle: ..., traitCollection: ...)`
    static func br(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.br, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chevron.down", bundle: ..., traitCollection: ...)`
    static func chevronDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chevronDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cn", bundle: ..., traitCollection: ...)`
    static func cn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "downTrend", bundle: ..., traitCollection: ...)`
    static func downTrend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.downTrend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "editAvatar", bundle: ..., traitCollection: ...)`
    static func editAvatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.editAvatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gb", bundle: ..., traitCollection: ...)`
    static func gb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gb, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greenArrowUp", bundle: ..., traitCollection: ...)`
    static func greenArrowUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenArrowUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "historyTabIcon", bundle: ..., traitCollection: ...)`
    static func historyTabIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.historyTabIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "id", bundle: ..., traitCollection: ...)`
    static func id(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.id, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "in", bundle: ..., traitCollection: ...)`
    static func `in`(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.`in`, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "leaderboardTabICon", bundle: ..., traitCollection: ...)`
    static func leaderboardTabICon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leaderboardTabICon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mx", bundle: ..., traitCollection: ...)`
    static func mx(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mx, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ng", bundle: ..., traitCollection: ...)`
    static func ng(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ng, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding3", bundle: ..., traitCollection: ...)`
    static func onboarding3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding4", bundle: ..., traitCollection: ...)`
    static func onboarding4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboarding6", bundle: ..., traitCollection: ...)`
    static func onboarding6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboarding6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboardingBackground", bundle: ..., traitCollection: ...)`
    static func onboardingBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "onboardingBackgroundForQuiz", bundle: ..., traitCollection: ...)`
    static func onboardingBackgroundForQuiz(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onboardingBackgroundForQuiz, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "optionDeselected", bundle: ..., traitCollection: ...)`
    static func optionDeselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.optionDeselected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "optionSelected", bundle: ..., traitCollection: ...)`
    static func optionSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.optionSelected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pk", bundle: ..., traitCollection: ...)`
    static func pk(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pk, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "prefinalMainImage", bundle: ..., traitCollection: ...)`
    static func prefinalMainImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.prefinalMainImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "redArrowDown", bundle: ..., traitCollection: ...)`
    static func redArrowDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.redArrowDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "registrationBackground", bundle: ..., traitCollection: ...)`
    static func registrationBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.registrationBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ru", bundle: ..., traitCollection: ...)`
    static func ru(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ru, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedCountryCell", bundle: ..., traitCollection: ...)`
    static func selectedCountryCell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedCountryCell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "selectedPageIndicator", bundle: ..., traitCollection: ...)`
    static func selectedPageIndicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.selectedPageIndicator, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settingsBarIcon", bundle: ..., traitCollection: ...)`
    static func settingsBarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsBarIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settingsLetterIcon", bundle: ..., traitCollection: ...)`
    static func settingsLetterIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsLetterIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "settingsStarIcon", bundle: ..., traitCollection: ...)`
    static func settingsStarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsStarIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splashImage", bundle: ..., traitCollection: ...)`
    static func splashImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tradeBarIcon", bundle: ..., traitCollection: ...)`
    static func tradeBarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tradeBarIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "unselectedCountryCell", bundle: ..., traitCollection: ...)`
    static func unselectedCountryCell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unselectedCountryCell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "upTrend", bundle: ..., traitCollection: ...)`
    static func upTrend(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.upTrend, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "us", bundle: ..., traitCollection: ...)`
    static func us(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.us, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 79 localization keys.
    struct localizable {
      /// en translation: 1 W
      ///
      /// Locales: en, ru
      static let w = Rswift.StringResource(key: "1 W", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: 1 d
      ///
      /// Locales: en, ru
      static let d = Rswift.StringResource(key: "1 d", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: 1 d
      ///
      /// Locales: en, ru
      static let oneDayShort = Rswift.StringResource(key: "oneDay.short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: 1 h
      ///
      /// Locales: en, ru
      static let oneHourShort = Rswift.StringResource(key: "oneHour.short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: 1 m
      ///
      /// Locales: en, ru
      static let oneMinuteShort = Rswift.StringResource(key: "oneMinute.short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: 15 m
      ///
      /// Locales: en, ru
      static let fifteenMinuteShort = Rswift.StringResource(key: "fifteenMinute.short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: 15 m
      ///
      /// Locales: en, ru
      static let m = Rswift.StringResource(key: "15 m", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: 4 h
      ///
      /// Locales: en, ru
      static let fourHoursShort = Rswift.StringResource(key: "fourHours.short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: 5 m
      ///
      /// Locales: en, ru
      static let fiveMinuteShort = Rswift.StringResource(key: "fiveMinute.short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: 7 d
      ///
      /// Locales: en, ru
      static let oneWeekShort = Rswift.StringResource(key: "oneWeek.short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Amount
      ///
      /// Locales: en, ru
      static let amount = Rswift.StringResource(key: "amount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Articles
      ///
      /// Locales: en, ru
      static let articles = Rswift.StringResource(key: "Articles", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Australian Dollar
      ///
      /// Locales: en, ru
      static let australianDollar = Rswift.StringResource(key: "Australian Dollar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Back
      ///
      /// Locales: en, ru
      static let buttonBack = Rswift.StringResource(key: "button.back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Balance
      ///
      /// Locales: en, ru
      static let balance = Rswift.StringResource(key: "Balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Begin trading
      ///
      /// Locales: en, ru
      static let beginTrading = Rswift.StringResource(key: "beginTrading", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: British Pound Sterling
      ///
      /// Locales: en, ru
      static let britishPoundSterling = Rswift.StringResource(key: "British Pound Sterling", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Buy
      ///
      /// Locales: en, ru
      static let buy = Rswift.StringResource(key: "Buy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Buy
      ///
      /// Locales: en, ru
      static let toBuy = Rswift.StringResource(key: "toBuy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: CONFIGURE
      ///
      /// Locales: en, ru
      static let buttonSetupTitle = Rswift.StringResource(key: "button.setup.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Canadian Dollar
      ///
      /// Locales: en, ru
      static let canadianDollar = Rswift.StringResource(key: "Canadian Dollar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, ru
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Closed
      ///
      /// Locales: en, ru
      static let closed = Rswift.StringResource(key: "Closed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Connect to developers
      ///
      /// Locales: en, ru
      static let connectToDevelopers = Rswift.StringResource(key: "Connect to developers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Enter to save your data
      ///
      /// Locales: en, ru
      static let registrationSubtitle = Rswift.StringResource(key: "registration.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Enter your details
      ///
      /// Locales: en, ru
      static let registrationEnterYourDetails = Rswift.StringResource(key: "registration.enterYourDetails", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Euro
      ///
      /// Locales: en, ru
      static let euro = Rswift.StringResource(key: "Euro", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Fundamental
      ///
      /// Locales: en, ru
      static let onboarding2Option1 = Rswift.StringResource(key: "onboarding.2.option.1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Graphs
      ///
      /// Locales: en, ru
      static let graphs = Rswift.StringResource(key: "Graphs", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Have you had any experience with Forex?
      ///
      /// Locales: en, ru
      static let onboarding1Question = Rswift.StringResource(key: "onboarding.1.question", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: History
      ///
      /// Locales: en, ru
      static let history = Rswift.StringResource(key: "History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: History
      ///
      /// Locales: en, ru
      static let tabBarHistoryTitle = Rswift.StringResource(key: "tabBar.history.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Invest
      ///
      /// Locales: en, ru
      static let onboarding3Option1 = Rswift.StringResource(key: "onboarding.3.option.1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Japanese Yen
      ///
      /// Locales: en, ru
      static let japaneseYen = Rswift.StringResource(key: "Japanese Yen", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Leaders
      ///
      /// Locales: en, ru
      static let tabBarLeaderboardTitle = Rswift.StringResource(key: "tabBar.leaderboard.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Leaders: traders top
      ///
      /// Locales: en, ru
      static let leadersTopTraders = Rswift.StringResource(key: "leaders.topTraders", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: My balance
      ///
      /// Locales: en, ru
      static let headerMyBalanceTitle = Rswift.StringResource(key: "header.myBalanceTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en, ru
      static let buttonNextTitle = Rswift.StringResource(key: "button.next.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: No
      ///
      /// Locales: en, ru
      static let onboarding1Option2 = Rswift.StringResource(key: "onboarding.1.option.2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: On
      ///
      /// Locales: en, ru
      static let on = Rswift.StringResource(key: "on", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Provided nickname has been taken already
      ///
      /// Locales: en, ru
      static let errorUserExists = Rswift.StringResource(key: "error.userExists", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Rate the app
      ///
      /// Locales: en, ru
      static let settingsRateTheApp = Rswift.StringResource(key: "settings.rateTheApp", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Read article
      ///
      /// Locales: en, ru
      static let readArticle = Rswift.StringResource(key: "Read article", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Register
      ///
      /// Locales: en, ru
      static let onboardingPrefinalTitle = Rswift.StringResource(key: "onboarding.prefinal.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Registration
      ///
      /// Locales: en, ru
      static let registration = Rswift.StringResource(key: "Registration", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Scalp
      ///
      /// Locales: en, ru
      static let onboarding3Option2 = Rswift.StringResource(key: "onboarding.3.option.2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Search
      ///
      /// Locales: en, ru
      static let searchPlaceholder = Rswift.StringResource(key: "SearchPlaceholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Select
      ///
      /// Locales: en, ru
      static let buttonSelectTitle = Rswift.StringResource(key: "button.select.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Sell
      ///
      /// Locales: en, ru
      static let sell = Rswift.StringResource(key: "Sell", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Sell
      ///
      /// Locales: en, ru
      static let toSell = Rswift.StringResource(key: "toSell", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, ru
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, ru
      static let tabBarSettingsTitle = Rswift.StringResource(key: "tabBar.settings.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Share
      ///
      /// Locales: en, ru
      static let share = Rswift.StringResource(key: "Share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Signals
      ///
      /// Locales: en, ru
      static let signals = Rswift.StringResource(key: "Signals", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Skip
      ///
      /// Locales: en, ru
      static let buttonSkipTitle = Rswift.StringResource(key: "button.skip.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Swiss franc
      ///
      /// Locales: en, ru
      static let swissFranc = Rswift.StringResource(key: "Swiss franc", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Technical
      ///
      /// Locales: en, ru
      static let onboarding2Option2 = Rswift.StringResource(key: "onboarding.2.option.2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Top
      ///
      /// Locales: en, ru
      static let top = Rswift.StringResource(key: "Top", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Total balance
      ///
      /// Locales: en, ru
      static let resultingBalance = Rswift.StringResource(key: "resultingBalance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Trading
      ///
      /// Locales: en, ru
      static let tabBarTradeTitle = Rswift.StringResource(key: "tabBar.trade.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: United States Dollar
      ///
      /// Locales: en, ru
      static let unitedStatesDollar = Rswift.StringResource(key: "United States Dollar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: What type of analysis do you prefer?
      ///
      /// Locales: en, ru
      static let onboarding2Question = Rswift.StringResource(key: "onboarding.2.question", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: What would you like to learn?
      ///
      /// Locales: en, ru
      static let onboarding3Question = Rswift.StringResource(key: "onboarding.3.question", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Write to support
      ///
      /// Locales: en, ru
      static let settingsWriteToSupport = Rswift.StringResource(key: "settings.writeToSupport", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Yes
      ///
      /// Locales: en, ru
      static let onboarding1Option1 = Rswift.StringResource(key: "onboarding.1.option.1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Your balance:
      ///
      /// Locales: en, ru
      static let yourBalance = Rswift.StringResource(key: "Your balance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Your nickname
      ///
      /// Locales: en, ru
      static let yourNickname = Rswift.StringResource(key: "Your nickname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Your starting balance
      ///
      /// Locales: en, ru
      static let onboardingPreFinalStartingBalance = Rswift.StringResource(key: "onboarding.preFinal.startingBalance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: country
      ///
      /// Locales: en, ru
      static let country = Rswift.StringResource(key: "country", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: date
      ///
      /// Locales: en, ru
      static let date = Rswift.StringResource(key: "date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: less than yours
      ///
      /// Locales: en, ru
      static let lessThan = Rswift.StringResource(key: "lessThan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: more than yours
      ///
      /// Locales: en, ru
      static let moreThan = Rswift.StringResource(key: "moreThan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: recommendation
      ///
      /// Locales: en, ru
      static let recommendation = Rswift.StringResource(key: "recommendation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: signal number
      ///
      /// Locales: en, ru
      static let signalNumber = Rswift.StringResource(key: "signal number", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: time
      ///
      /// Locales: en, ru
      static let time = Rswift.StringResource(key: "time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: time frame
      ///
      /// Locales: en, ru
      static let timeFrame = Rswift.StringResource(key: "time frame", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: to see actions of other participants
      ///
      /// Locales: en, ru
      static let onboardingPrefinalSubtitle = Rswift.StringResource(key: "onboarding.prefinal.subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: user's nickname
      ///
      /// Locales: en, ru
      static let nickname = Rswift.StringResource(key: "nickname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: when price lower
      ///
      /// Locales: en, ru
      static let whenPriceLower = Rswift.StringResource(key: "when price lower", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)

      /// en translation: 1 W
      ///
      /// Locales: en, ru
      static func w(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1 W", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "1 W"
        }

        return NSLocalizedString("1 W", bundle: bundle, comment: "")
      }

      /// en translation: 1 d
      ///
      /// Locales: en, ru
      static func d(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("1 d", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "1 d"
        }

        return NSLocalizedString("1 d", bundle: bundle, comment: "")
      }

      /// en translation: 1 d
      ///
      /// Locales: en, ru
      static func oneDayShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oneDay.short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "oneDay.short"
        }

        return NSLocalizedString("oneDay.short", bundle: bundle, comment: "")
      }

      /// en translation: 1 h
      ///
      /// Locales: en, ru
      static func oneHourShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oneHour.short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "oneHour.short"
        }

        return NSLocalizedString("oneHour.short", bundle: bundle, comment: "")
      }

      /// en translation: 1 m
      ///
      /// Locales: en, ru
      static func oneMinuteShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oneMinute.short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "oneMinute.short"
        }

        return NSLocalizedString("oneMinute.short", bundle: bundle, comment: "")
      }

      /// en translation: 15 m
      ///
      /// Locales: en, ru
      static func fifteenMinuteShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fifteenMinute.short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fifteenMinute.short"
        }

        return NSLocalizedString("fifteenMinute.short", bundle: bundle, comment: "")
      }

      /// en translation: 15 m
      ///
      /// Locales: en, ru
      static func m(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("15 m", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "15 m"
        }

        return NSLocalizedString("15 m", bundle: bundle, comment: "")
      }

      /// en translation: 4 h
      ///
      /// Locales: en, ru
      static func fourHoursShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fourHours.short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fourHours.short"
        }

        return NSLocalizedString("fourHours.short", bundle: bundle, comment: "")
      }

      /// en translation: 5 m
      ///
      /// Locales: en, ru
      static func fiveMinuteShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fiveMinute.short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fiveMinute.short"
        }

        return NSLocalizedString("fiveMinute.short", bundle: bundle, comment: "")
      }

      /// en translation: 7 d
      ///
      /// Locales: en, ru
      static func oneWeekShort(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oneWeek.short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "oneWeek.short"
        }

        return NSLocalizedString("oneWeek.short", bundle: bundle, comment: "")
      }

      /// en translation: Amount
      ///
      /// Locales: en, ru
      static func amount(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("amount", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "amount"
        }

        return NSLocalizedString("amount", bundle: bundle, comment: "")
      }

      /// en translation: Articles
      ///
      /// Locales: en, ru
      static func articles(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Articles", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Articles"
        }

        return NSLocalizedString("Articles", bundle: bundle, comment: "")
      }

      /// en translation: Australian Dollar
      ///
      /// Locales: en, ru
      static func australianDollar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Australian Dollar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Australian Dollar"
        }

        return NSLocalizedString("Australian Dollar", bundle: bundle, comment: "")
      }

      /// en translation: Back
      ///
      /// Locales: en, ru
      static func buttonBack(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button.back", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button.back"
        }

        return NSLocalizedString("button.back", bundle: bundle, comment: "")
      }

      /// en translation: Balance
      ///
      /// Locales: en, ru
      static func balance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Balance"
        }

        return NSLocalizedString("Balance", bundle: bundle, comment: "")
      }

      /// en translation: Begin trading
      ///
      /// Locales: en, ru
      static func beginTrading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("beginTrading", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "beginTrading"
        }

        return NSLocalizedString("beginTrading", bundle: bundle, comment: "")
      }

      /// en translation: British Pound Sterling
      ///
      /// Locales: en, ru
      static func britishPoundSterling(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("British Pound Sterling", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "British Pound Sterling"
        }

        return NSLocalizedString("British Pound Sterling", bundle: bundle, comment: "")
      }

      /// en translation: Buy
      ///
      /// Locales: en, ru
      static func buy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Buy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Buy"
        }

        return NSLocalizedString("Buy", bundle: bundle, comment: "")
      }

      /// en translation: Buy
      ///
      /// Locales: en, ru
      static func toBuy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toBuy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "toBuy"
        }

        return NSLocalizedString("toBuy", bundle: bundle, comment: "")
      }

      /// en translation: CONFIGURE
      ///
      /// Locales: en, ru
      static func buttonSetupTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button.setup.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button.setup.title"
        }

        return NSLocalizedString("button.setup.title", bundle: bundle, comment: "")
      }

      /// en translation: Canadian Dollar
      ///
      /// Locales: en, ru
      static func canadianDollar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Canadian Dollar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Canadian Dollar"
        }

        return NSLocalizedString("Canadian Dollar", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, ru
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Closed
      ///
      /// Locales: en, ru
      static func closed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Closed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Closed"
        }

        return NSLocalizedString("Closed", bundle: bundle, comment: "")
      }

      /// en translation: Connect to developers
      ///
      /// Locales: en, ru
      static func connectToDevelopers(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Connect to developers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Connect to developers"
        }

        return NSLocalizedString("Connect to developers", bundle: bundle, comment: "")
      }

      /// en translation: Enter to save your data
      ///
      /// Locales: en, ru
      static func registrationSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration.subtitle"
        }

        return NSLocalizedString("registration.subtitle", bundle: bundle, comment: "")
      }

      /// en translation: Enter your details
      ///
      /// Locales: en, ru
      static func registrationEnterYourDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("registration.enterYourDetails", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "registration.enterYourDetails"
        }

        return NSLocalizedString("registration.enterYourDetails", bundle: bundle, comment: "")
      }

      /// en translation: Euro
      ///
      /// Locales: en, ru
      static func euro(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Euro", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Euro"
        }

        return NSLocalizedString("Euro", bundle: bundle, comment: "")
      }

      /// en translation: Fundamental
      ///
      /// Locales: en, ru
      static func onboarding2Option1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding.2.option.1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding.2.option.1"
        }

        return NSLocalizedString("onboarding.2.option.1", bundle: bundle, comment: "")
      }

      /// en translation: Graphs
      ///
      /// Locales: en, ru
      static func graphs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Graphs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Graphs"
        }

        return NSLocalizedString("Graphs", bundle: bundle, comment: "")
      }

      /// en translation: Have you had any experience with Forex?
      ///
      /// Locales: en, ru
      static func onboarding1Question(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding.1.question", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding.1.question"
        }

        return NSLocalizedString("onboarding.1.question", bundle: bundle, comment: "")
      }

      /// en translation: History
      ///
      /// Locales: en, ru
      static func history(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("History", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "History"
        }

        return NSLocalizedString("History", bundle: bundle, comment: "")
      }

      /// en translation: History
      ///
      /// Locales: en, ru
      static func tabBarHistoryTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tabBar.history.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tabBar.history.title"
        }

        return NSLocalizedString("tabBar.history.title", bundle: bundle, comment: "")
      }

      /// en translation: Invest
      ///
      /// Locales: en, ru
      static func onboarding3Option1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding.3.option.1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding.3.option.1"
        }

        return NSLocalizedString("onboarding.3.option.1", bundle: bundle, comment: "")
      }

      /// en translation: Japanese Yen
      ///
      /// Locales: en, ru
      static func japaneseYen(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Japanese Yen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Japanese Yen"
        }

        return NSLocalizedString("Japanese Yen", bundle: bundle, comment: "")
      }

      /// en translation: Leaders
      ///
      /// Locales: en, ru
      static func tabBarLeaderboardTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tabBar.leaderboard.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tabBar.leaderboard.title"
        }

        return NSLocalizedString("tabBar.leaderboard.title", bundle: bundle, comment: "")
      }

      /// en translation: Leaders: traders top
      ///
      /// Locales: en, ru
      static func leadersTopTraders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("leaders.topTraders", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "leaders.topTraders"
        }

        return NSLocalizedString("leaders.topTraders", bundle: bundle, comment: "")
      }

      /// en translation: My balance
      ///
      /// Locales: en, ru
      static func headerMyBalanceTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("header.myBalanceTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "header.myBalanceTitle"
        }

        return NSLocalizedString("header.myBalanceTitle", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en, ru
      static func buttonNextTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button.next.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button.next.title"
        }

        return NSLocalizedString("button.next.title", bundle: bundle, comment: "")
      }

      /// en translation: No
      ///
      /// Locales: en, ru
      static func onboarding1Option2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding.1.option.2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding.1.option.2"
        }

        return NSLocalizedString("onboarding.1.option.2", bundle: bundle, comment: "")
      }

      /// en translation: On
      ///
      /// Locales: en, ru
      static func on(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("on", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "on"
        }

        return NSLocalizedString("on", bundle: bundle, comment: "")
      }

      /// en translation: Provided nickname has been taken already
      ///
      /// Locales: en, ru
      static func errorUserExists(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error.userExists", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error.userExists"
        }

        return NSLocalizedString("error.userExists", bundle: bundle, comment: "")
      }

      /// en translation: Rate the app
      ///
      /// Locales: en, ru
      static func settingsRateTheApp(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.rateTheApp", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.rateTheApp"
        }

        return NSLocalizedString("settings.rateTheApp", bundle: bundle, comment: "")
      }

      /// en translation: Read article
      ///
      /// Locales: en, ru
      static func readArticle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Read article", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Read article"
        }

        return NSLocalizedString("Read article", bundle: bundle, comment: "")
      }

      /// en translation: Register
      ///
      /// Locales: en, ru
      static func onboardingPrefinalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding.prefinal.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding.prefinal.title"
        }

        return NSLocalizedString("onboarding.prefinal.title", bundle: bundle, comment: "")
      }

      /// en translation: Registration
      ///
      /// Locales: en, ru
      static func registration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Registration", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Registration"
        }

        return NSLocalizedString("Registration", bundle: bundle, comment: "")
      }

      /// en translation: Scalp
      ///
      /// Locales: en, ru
      static func onboarding3Option2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding.3.option.2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding.3.option.2"
        }

        return NSLocalizedString("onboarding.3.option.2", bundle: bundle, comment: "")
      }

      /// en translation: Search
      ///
      /// Locales: en, ru
      static func searchPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("SearchPlaceholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "SearchPlaceholder"
        }

        return NSLocalizedString("SearchPlaceholder", bundle: bundle, comment: "")
      }

      /// en translation: Select
      ///
      /// Locales: en, ru
      static func buttonSelectTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button.select.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button.select.title"
        }

        return NSLocalizedString("button.select.title", bundle: bundle, comment: "")
      }

      /// en translation: Sell
      ///
      /// Locales: en, ru
      static func sell(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sell"
        }

        return NSLocalizedString("Sell", bundle: bundle, comment: "")
      }

      /// en translation: Sell
      ///
      /// Locales: en, ru
      static func toSell(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("toSell", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "toSell"
        }

        return NSLocalizedString("toSell", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, ru
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings"
        }

        return NSLocalizedString("Settings", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, ru
      static func tabBarSettingsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tabBar.settings.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tabBar.settings.title"
        }

        return NSLocalizedString("tabBar.settings.title", bundle: bundle, comment: "")
      }

      /// en translation: Share
      ///
      /// Locales: en, ru
      static func share(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share"
        }

        return NSLocalizedString("Share", bundle: bundle, comment: "")
      }

      /// en translation: Signals
      ///
      /// Locales: en, ru
      static func signals(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Signals", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Signals"
        }

        return NSLocalizedString("Signals", bundle: bundle, comment: "")
      }

      /// en translation: Skip
      ///
      /// Locales: en, ru
      static func buttonSkipTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button.skip.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button.skip.title"
        }

        return NSLocalizedString("button.skip.title", bundle: bundle, comment: "")
      }

      /// en translation: Swiss franc
      ///
      /// Locales: en, ru
      static func swissFranc(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Swiss franc", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Swiss franc"
        }

        return NSLocalizedString("Swiss franc", bundle: bundle, comment: "")
      }

      /// en translation: Technical
      ///
      /// Locales: en, ru
      static func onboarding2Option2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding.2.option.2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding.2.option.2"
        }

        return NSLocalizedString("onboarding.2.option.2", bundle: bundle, comment: "")
      }

      /// en translation: Top
      ///
      /// Locales: en, ru
      static func top(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Top", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Top"
        }

        return NSLocalizedString("Top", bundle: bundle, comment: "")
      }

      /// en translation: Total balance
      ///
      /// Locales: en, ru
      static func resultingBalance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resultingBalance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resultingBalance"
        }

        return NSLocalizedString("resultingBalance", bundle: bundle, comment: "")
      }

      /// en translation: Trading
      ///
      /// Locales: en, ru
      static func tabBarTradeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tabBar.trade.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tabBar.trade.title"
        }

        return NSLocalizedString("tabBar.trade.title", bundle: bundle, comment: "")
      }

      /// en translation: United States Dollar
      ///
      /// Locales: en, ru
      static func unitedStatesDollar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("United States Dollar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "United States Dollar"
        }

        return NSLocalizedString("United States Dollar", bundle: bundle, comment: "")
      }

      /// en translation: What type of analysis do you prefer?
      ///
      /// Locales: en, ru
      static func onboarding2Question(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding.2.question", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding.2.question"
        }

        return NSLocalizedString("onboarding.2.question", bundle: bundle, comment: "")
      }

      /// en translation: What would you like to learn?
      ///
      /// Locales: en, ru
      static func onboarding3Question(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding.3.question", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding.3.question"
        }

        return NSLocalizedString("onboarding.3.question", bundle: bundle, comment: "")
      }

      /// en translation: Write to support
      ///
      /// Locales: en, ru
      static func settingsWriteToSupport(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings.writeToSupport", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings.writeToSupport"
        }

        return NSLocalizedString("settings.writeToSupport", bundle: bundle, comment: "")
      }

      /// en translation: Yes
      ///
      /// Locales: en, ru
      static func onboarding1Option1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding.1.option.1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding.1.option.1"
        }

        return NSLocalizedString("onboarding.1.option.1", bundle: bundle, comment: "")
      }

      /// en translation: Your balance:
      ///
      /// Locales: en, ru
      static func yourBalance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your balance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your balance"
        }

        return NSLocalizedString("Your balance", bundle: bundle, comment: "")
      }

      /// en translation: Your nickname
      ///
      /// Locales: en, ru
      static func yourNickname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your nickname", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your nickname"
        }

        return NSLocalizedString("Your nickname", bundle: bundle, comment: "")
      }

      /// en translation: Your starting balance
      ///
      /// Locales: en, ru
      static func onboardingPreFinalStartingBalance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding.preFinal.startingBalance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding.preFinal.startingBalance"
        }

        return NSLocalizedString("onboarding.preFinal.startingBalance", bundle: bundle, comment: "")
      }

      /// en translation: country
      ///
      /// Locales: en, ru
      static func country(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("country", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "country"
        }

        return NSLocalizedString("country", bundle: bundle, comment: "")
      }

      /// en translation: date
      ///
      /// Locales: en, ru
      static func date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "date"
        }

        return NSLocalizedString("date", bundle: bundle, comment: "")
      }

      /// en translation: less than yours
      ///
      /// Locales: en, ru
      static func lessThan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lessThan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lessThan"
        }

        return NSLocalizedString("lessThan", bundle: bundle, comment: "")
      }

      /// en translation: more than yours
      ///
      /// Locales: en, ru
      static func moreThan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("moreThan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "moreThan"
        }

        return NSLocalizedString("moreThan", bundle: bundle, comment: "")
      }

      /// en translation: recommendation
      ///
      /// Locales: en, ru
      static func recommendation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("recommendation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "recommendation"
        }

        return NSLocalizedString("recommendation", bundle: bundle, comment: "")
      }

      /// en translation: signal number
      ///
      /// Locales: en, ru
      static func signalNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signal number", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "signal number"
        }

        return NSLocalizedString("signal number", bundle: bundle, comment: "")
      }

      /// en translation: time
      ///
      /// Locales: en, ru
      static func time(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "time"
        }

        return NSLocalizedString("time", bundle: bundle, comment: "")
      }

      /// en translation: time frame
      ///
      /// Locales: en, ru
      static func timeFrame(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("time frame", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "time frame"
        }

        return NSLocalizedString("time frame", bundle: bundle, comment: "")
      }

      /// en translation: to see actions of other participants
      ///
      /// Locales: en, ru
      static func onboardingPrefinalSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboarding.prefinal.subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "onboarding.prefinal.subtitle"
        }

        return NSLocalizedString("onboarding.prefinal.subtitle", bundle: bundle, comment: "")
      }

      /// en translation: user's nickname
      ///
      /// Locales: en, ru
      static func nickname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nickname", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nickname"
        }

        return NSLocalizedString("nickname", bundle: bundle, comment: "")
      }

      /// en translation: when price lower
      ///
      /// Locales: en, ru
      static func whenPriceLower(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("when price lower", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "when price lower"
        }

        return NSLocalizedString("when price lower", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "splashImage.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splashImage.png' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
